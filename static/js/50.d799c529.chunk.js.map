{"version":3,"sources":["../node_modules/antd/es/auto-complete/index.js","components/common/AutoComplete/AutoComplete.styles.ts","components/common/AutoComplete/AutoComplete.tsx","pages/uiComponentsPages/forms/AutoCompletesPage.tsx"],"names":["Option","Select","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizeInput","customizePrefixCls","prefixCls","className","children","dataSource","childNodes","toArray","length","isValidElement","_childNodes","_slicedToArray","optionChildren","getInputElement","undefined","map","item","_typeof","React","key","value","optionValue","text","ConfigConsumer","_ref","getPrefixCls","_extends","omit","classNames","concat","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","styled","AntAutoComplete","Link","a","CategoryWrapper","div","SearchInput","CommonSearchInput","mockVal","str","repeat","AutoCompletesPage","t","useTranslation","useState","options","setOptions","result","setResult","renderTitle","title","href","target","rel","renderItem","count","label","UserOutlined","categories","PageTitle","style","width","onSearch","searchText","placeholder","res","indexOf","domain","email","dropdownClassName","prefix"],"mappings":"yQAmBIA,EAASC,IAAOD,OAEpB,SAASE,EAA+BC,GACtC,OAAOA,GAASA,EAAMC,OAASD,EAAMC,KAAKC,gBAAkBF,EAAMC,KAAKE,kBAGzE,IAAIC,EAAe,SAAsBC,EAAOC,GAC9C,IAMIC,EANAC,EAAqBH,EAAMI,UAC3BC,EAAYL,EAAMK,UAClBC,EAAWN,EAAMM,SACjBC,EAAaP,EAAMO,WACnBC,EAAaC,YAAQH,GAIzB,GAA0B,IAAtBE,EAAWE,QAAgBC,YAAeH,EAAW,MAAQd,EAA+Bc,EAAW,IAAK,CAC9G,IAAII,EAAcC,YAAeL,EAAY,GAE7CN,EAAiBU,EAAY,GAG/B,IAIIE,EAJAC,EAAkBb,EAAiB,WACrC,OAAOA,QACLc,EAqCJ,OAhCEF,EADEN,EAAWE,QAAUhB,EAA+Bc,EAAW,IAChDF,EAEAC,EAAaA,EAAWU,KAAI,SAAUC,GACrD,GAAIP,YAAeO,GACjB,OAAOA,EAGT,OAAQC,YAAQD,IACd,IAAK,SACH,OAAoBE,gBAAoB5B,EAAQ,CAC9C6B,IAAKH,EACLI,MAAOJ,GACNA,GAEL,IAAK,SAED,IAAIK,EAAcL,EAAKI,MACvB,OAAoBF,gBAAoB5B,EAAQ,CAC9C6B,IAAKE,EACLD,MAAOC,GACNL,EAAKM,MAGZ,QAEE,WAED,GAKaJ,gBAAoBK,IAAgB,MAAM,SAAUC,GACtE,IACItB,GAAYuB,EADGD,EAAKC,cACK,SAAUxB,GACvC,OAAoBiB,gBAAoB3B,IAAQmC,YAAS,CACvD3B,IAAKA,GACJ4B,YAAK7B,EAAO,CAAC,eAAgB,CAC9BI,UAAWA,EACXC,UAAWyB,IAAW,GAAGC,OAAO3B,EAAW,kBAAmBC,GAC9D2B,KAAMvC,IAAOwC,iCACZ,CAEDlB,gBAAiBA,IACfD,OAIJoB,EAA+Bd,aAAiBrB,GACpDmC,EAAgB1C,OAASA,EACV0C,I,QAAAA,IC9FFnC,EAAeoC,kBAAOC,EAAPD,CAAH,0B,OCCZpC,EAAiE,SAACC,GAC7E,OAAO,cAAC,EAAD,eAAoBA,K,uDCMvBqC,EAAOF,UAAOG,EAAV,6CAIJC,EAAkBJ,UAAOK,IAAV,iFAKfC,EAAcN,kBAAOO,IAAPP,CAAH,oFAMXQ,EAAU,SAACC,GAAD,IAAcC,EAAd,uDAAuB,EAAvB,MAA8B,CAC5CvB,MAAOsB,EAAIC,OAAOA,KAsGLC,UAnGqB,WAClC,IAAQC,EAAMC,cAAND,EACR,EAA8BE,mBAA8B,IAA5D,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAmB,IAA/C,mBAAOG,EAAP,KAAeC,EAAf,KAgBMC,EAAc,SAACC,GAAD,OAClB,iCACGA,EACD,cAAClB,EAAD,CAAMmB,KAAK,uCAAuCC,OAAO,SAASC,IAAI,sBAAtE,sBAMEC,EAAa,SAACJ,EAAeK,GAAhB,MAAmC,CACpDtC,MAAOiC,EACPM,MACE,eAACtB,EAAD,WACGgB,EACD,iCACE,cAACO,EAAA,EAAD,IADF,IACoBF,UAMpBG,EAAa,CACjB,CACEF,MAAOP,EAAYP,EAAE,4BACrBG,QAAS,CAACS,EAAWZ,EAAE,2BAA4B,KAAQY,EAAWZ,EAAE,6BAA8B,SAExG,CACEc,MAAOP,EAAYP,EAAE,4BACrBG,QAAS,CACPS,EAAWZ,EAAE,gCAAiC,OAC9CY,EAAWZ,EAAE,8BAA+B,SAGhD,CACEc,MAAOP,EAAYP,EAAE,2BACrBG,QAAS,CAACS,EAAWZ,EAAE,mCAAoC,QAI/D,OACE,qCACE,cAACiB,EAAA,EAAD,UAAYjB,EAAE,yBACd,eAAC,IAAD,WACE,cAAC,IAAD,CAAQQ,MAAOR,EAAE,uBAAjB,SACE,gCACE,cAAC,EAAD,CACEG,QAASA,EACTe,MAAO,CAAEC,MAAO,KAChBC,SApDS,SAACC,GACpBjB,EAAYiB,EAAkB,CAACzB,EAAQyB,GAAazB,EAAQyB,EAAY,GAAIzB,EAAQyB,EAAY,IAAvE,KAoDfC,YAAatB,EAAE,iCAIrB,cAAC,IAAD,CAAQQ,MAAOR,EAAE,+BAAjB,SACE,gCACE,cAAC,EAAD,CACEkB,MAAO,CAAEC,MAAO,KAChBC,SAvEe,SAAC7C,GAC1B,IAAIgD,EAEFA,GADGhD,GAASA,EAAMiD,QAAQ,MAAQ,EAC5B,GAEA,CAAC,YAAa,UAAW,UAAUtD,KAAI,SAACuD,GAAD,gBAAelD,EAAf,YAAwBkD,MAEvEnB,EAAUiB,IAiEAD,YAAatB,EAAE,2BAHjB,SAKGK,EAAOnC,KAAI,SAACwD,GAAD,OACV,cAAC,IAAD,CAAoBnD,MAAOmD,EAA3B,SACGA,GADUA,YAOrB,cAAC,IAAD,CAAQlB,MAAOR,EAAE,4BAAjB,SACE,gCACE,cAAC,EAAD,CAAc2B,kBAAkB,mCAAmCxB,QAASa,EAA5E,SACE,cAAC,EAAD,CAAaM,YAAatB,EAAE,2BAA4B4B,OAAQ","file":"static/js/50.d799c529.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigConsumer } from '../config-provider';\nimport Select from '../select';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nvar Option = Select.Option;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = toArray(children); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n\n    customizeInput = _childNodes[0];\n  }\n\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined; // ============================ Options ============================\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      className: classNames(\"\".concat(prefixCls, \"-auto-complete\"), className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n    }, {\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\n\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;","import styled from 'styled-components';\nimport { AutoComplete as AntAutoComplete } from 'antd';\n\nexport const AutoComplete = styled(AntAutoComplete)``;\n","import { ComponentProps } from 'react';\nimport { AutoComplete as AntAutoComplete } from 'antd';\nimport * as S from './AutoComplete.styles';\n\nexport const AutoComplete: React.FC<ComponentProps<typeof AntAutoComplete>> = (props) => {\n  return <S.AutoComplete {...props} />;\n};\n","import React, { useState } from 'react';\nimport { Col } from 'antd';\nimport { AutoComplete } from 'components/common/AutoComplete/AutoComplete';\nimport { SearchInput as CommonSearchInput } from 'components/common/inputs/SearchInput/SearchInput';\nimport { Option } from 'components/common/selects/Select/Select';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles';\n\nconst Link = styled.a`\n  float: right;\n`;\n\nconst CategoryWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst SearchInput = styled(CommonSearchInput)`\n  .ant-input-search-button {\n    height: 3.1rem;\n  }\n`;\n\nconst mockVal = (str: string, repeat = 1) => ({\n  value: str.repeat(repeat),\n});\n\nconst AutoCompletesPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [options, setOptions] = useState<{ value: string }[]>([]);\n  const [result, setResult] = useState<string[]>([]);\n\n  const handleCustomSearch = (value: string) => {\n    let res: string[];\n    if (!value || value.indexOf('@') >= 0) {\n      res = [];\n    } else {\n      res = ['gmail.com', '163.com', 'qq.com'].map((domain) => `${value}@${domain}`);\n    }\n    setResult(res);\n  };\n\n  const handleSearch = (searchText: string) => {\n    setOptions(!searchText ? [] : [mockVal(searchText), mockVal(searchText, 2), mockVal(searchText, 3)]);\n  };\n\n  const renderTitle = (title: string) => (\n    <span>\n      {title}\n      <Link href=\"https://www.google.com/search?q=antd\" target=\"_blank\" rel=\"noopener noreferrer\">\n        more\n      </Link>\n    </span>\n  );\n\n  const renderItem = (title: string, count: number) => ({\n    value: title,\n    label: (\n      <CategoryWrapper>\n        {title}\n        <span>\n          <UserOutlined /> {count}\n        </span>\n      </CategoryWrapper>\n    ),\n  });\n\n  const categories = [\n    {\n      label: renderTitle(t('autoCompletes.libraries')),\n      options: [renderItem(t('autoCompletes.antDesign'), 10000), renderItem(t('autoCompletes.antDesignUI'), 10600)],\n    },\n    {\n      label: renderTitle(t('autoCompletes.solutions')),\n      options: [\n        renderItem(t('autoCompletes.antDesignUIFaq'), 60100),\n        renderItem(t('autoCompletes.antDesignFaq'), 30010),\n      ],\n    },\n    {\n      label: renderTitle(t('autoCompletes.articles')),\n      options: [renderItem(t('autoCompletes.antDesignLanguage'), 100000)],\n    },\n  ];\n\n  return (\n    <>\n      <PageTitle>{t('common.autocomplete')}</PageTitle>\n      <Col>\n        <S.Card title={t('autoCompletes.basic')}>\n          <label>\n            <AutoComplete\n              options={options}\n              style={{ width: 200 }}\n              onSearch={handleSearch}\n              placeholder={t('autoCompletes.inputHere')}\n            />\n          </label>\n        </S.Card>\n        <S.Card title={t('autoCompletes.customOptions')}>\n          <label>\n            <AutoComplete\n              style={{ width: 200 }}\n              onSearch={handleCustomSearch}\n              placeholder={t('autoCompletes.inputHere')}\n            >\n              {result.map((email: string) => (\n                <Option key={email} value={email}>\n                  {email}\n                </Option>\n              ))}\n            </AutoComplete>\n          </label>\n        </S.Card>\n        <S.Card title={t('autoCompletes.categories')}>\n          <label>\n            <AutoComplete dropdownClassName=\"certain-category-search-dropdown\" options={categories}>\n              <SearchInput placeholder={t('autoCompletes.inputHere')} prefix={null} />\n            </AutoComplete>\n          </label>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default AutoCompletesPage;\n"],"sourceRoot":""}