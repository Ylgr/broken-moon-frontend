{"version":3,"sources":["constants/patterns.ts","components/common/inputs/SuffixInput/SuffixInput.styles.ts","components/common/inputs/SuffixInput/SuffixInput.tsx","components/common/inputs/OpenURLInput/OpenURLInput.tsx","components/common/inputs/ClipboardInput/ClipboardInput.tsx","pages/uiComponentsPages/forms/InputsPage.tsx"],"names":["passwordPattern","RegExp","websitePattern","Suffix","styled","div","props","isVisible","SuffixInput","suffix","isVisibleSuffix","Input","OpenURLInput","href","target","t","useTranslation","isMatch","useMemo","test","title","size","disabled","type","icon","ClipboardInput","valueToCopy","handleCopy","useCallback","navigator","clipboard","writeText","then","notificationController","info","message","onClick","InputsPage","useState","clipboardValue","setClipboardValue","newTabValue","setNewTabValue","selectBefore","defaultValue","value","selectAfter","placeholder","prefix","addonBefore","addonAfter","allowClear","enterButton","iconRender","visible","rows","onChange","e"],"mappings":"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","file":"static/js/12.3eb17138.chunk.js","sourcesContent":["export const passwordPattern = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/);\n\nexport const websitePattern = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?/gi;\n","import styled from 'styled-components';\n\ninterface SuffixProps {\n  isVisible: boolean;\n}\n\nexport const Suffix = styled.div<SuffixProps>`\n  transition: all 0.5s ease;\n  visibility: visible;\n  opacity: 1;\n\n  ${(props) => !props.isVisible && 'opacity: 0; visibility: hidden'};\n`;\n","import React from 'react';\nimport { Input, InputProps } from '../Input/Input';\nimport * as S from './SuffixInput.styles';\n\nexport interface SuffixInputProps extends InputProps {\n  suffix: React.ReactNode;\n  isVisibleSuffix?: boolean;\n}\n\nexport const SuffixInput: React.FC<SuffixInputProps> = ({ suffix, isVisibleSuffix = true, ...props }) => (\n  <Input suffix={<S.Suffix isVisible={isVisibleSuffix}>{suffix}</S.Suffix>} {...props} />\n);\n","import React, { useMemo } from 'react';\nimport { Tooltip } from 'antd';\nimport { SuffixInput } from '../SuffixInput/SuffixInput';\nimport { useTranslation } from 'react-i18next';\nimport { FileTextOutlined } from '@ant-design/icons';\nimport { InputProps } from '../Input/Input';\nimport { websitePattern } from 'constants/patterns';\nimport { Button } from '@app/components/common/buttons/Button/Button';\n\ninterface OpenURLInputProps extends InputProps {\n  href?: string;\n  target?: string;\n}\n\nexport const OpenURLInput: React.FC<OpenURLInputProps> = ({ href, target = '_blank', ...props }) => {\n  const { t } = useTranslation();\n\n  const isMatch = useMemo(() => new RegExp(websitePattern).test(href || ' '), [href]);\n\n  return (\n    <SuffixInput\n      suffix={\n        <Tooltip title={t('common.openInNewTab')}>\n          <Button\n            size=\"small\"\n            href={href}\n            target={target}\n            disabled={!isMatch}\n            type=\"text\"\n            icon={<FileTextOutlined />}\n          />\n        </Tooltip>\n      }\n      {...props}\n    />\n  );\n};\n","import React, { useCallback } from 'react';\nimport { Button, Tooltip } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { CopyOutlined } from '@ant-design/icons';\nimport { SuffixInput } from '../SuffixInput/SuffixInput';\nimport { InputProps } from '../Input/Input';\nimport { notificationController } from 'controllers/notificationController';\n\ninterface ClipboardInputProps extends InputProps {\n  valueToCopy?: string;\n}\n\nexport const ClipboardInput: React.FC<ClipboardInputProps> = ({ valueToCopy, ...props }) => {\n  const { t } = useTranslation();\n\n  const handleCopy = useCallback(\n    () =>\n      valueToCopy &&\n      navigator.clipboard.writeText(valueToCopy).then(() => {\n        notificationController.info({ message: t('common.copied') });\n      }),\n    [valueToCopy, t],\n  );\n\n  return (\n    <SuffixInput\n      suffix={\n        <Tooltip title={t('common.copy')}>\n          <Button size=\"small\" disabled={!valueToCopy} type=\"text\" icon={<CopyOutlined />} onClick={handleCopy} />\n        </Tooltip>\n      }\n      {...props}\n    />\n  );\n};\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  UserOutlined,\n  AudioOutlined,\n  EyeTwoTone,\n  EyeInvisibleOutlined,\n  SettingOutlined,\n  InfoCircleOutlined,\n} from '@ant-design/icons';\nimport { Col, Cascader, Tooltip } from 'antd';\nimport { Input, TextArea } from '@app/components/common/inputs/Input/Input';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport { Select, Option } from '@app/components/common/selects/Select/Select';\nimport { SearchInput } from '@app/components/common/inputs/SearchInput/SearchInput';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\nimport { ClipboardInput } from '@app/components/common/inputs/ClipboardInput/ClipboardInput';\nimport { OpenURLInput } from '@app/components/common/inputs/OpenURLInput/OpenURLInput';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles';\n\nconst InputsPage: React.FC = () => {\n  const { t } = useTranslation();\n  const [clipboardValue, setClipboardValue] = useState('@altence_team');\n  const [newTabValue, setNewTabValue] = useState('https://altence.com');\n\n  const selectBefore = (\n    <Select defaultValue=\"http://\">\n      <Option value=\"http://\">http://</Option>\n      <Option value=\"https://\">https://</Option>\n    </Select>\n  );\n\n  const selectAfter = (\n    <Select defaultValue=\".com\">\n      <Option value=\".com\">.com</Option>\n      <Option value=\".jp\">.jp</Option>\n      <Option value=\".cn\">.cn</Option>\n      <Option value=\".org\">.org</Option>\n    </Select>\n  );\n\n  return (\n    <>\n      <PageTitle>{t('common.input')}</PageTitle>\n      <Col>\n        <S.Card title={t('inputs.basic')}>\n          <S.InputsWrapper>\n            <Input placeholder={t('inputs.basic')} />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.sizes')}>\n          <S.InputsWrapper>\n            <Input size=\"small\" placeholder={t('inputs.small')} prefix={<UserOutlined />} />\n            <Input placeholder={t('inputs.default')} prefix={<UserOutlined />} />\n            <Input size=\"large\" placeholder={t('inputs.large')} prefix={<UserOutlined />} />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.prePost')}>\n          <S.InputsWrapper>\n            <Input addonBefore=\"http://\" addonAfter=\".com\" defaultValue=\"mysite\" />\n            <Input addonBefore={selectBefore} addonAfter={selectAfter} defaultValue=\"mysite\" />\n            <Input addonAfter={<SettingOutlined />} defaultValue=\"mysite\" />\n            <Input addonBefore=\"http://\" suffix=\".com\" defaultValue=\"mysite\" />\n            <Input addonBefore={<Cascader placeholder=\"cascader\" />} defaultValue=\"mysite\" />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.prefixSuffix')}>\n          <S.InputsWrapper>\n            <Input\n              placeholder={t('inputs.enterName')}\n              prefix={<UserOutlined />}\n              suffix={\n                <Tooltip title={t('inputs.extra')}>\n                  <InfoCircleOutlined />\n                </Tooltip>\n              }\n            />\n            <Input prefix=\"￥\" suffix=\"RMB\" />\n            <Input prefix=\"￥\" suffix=\"RMB\" disabled />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.search')}>\n          <S.InputsWrapper>\n            <SearchInput placeholder={t('inputs.searchText')} allowClear />\n            <SearchInput addonBefore=\"https://\" placeholder={t('inputs.searchText')} allowClear />\n            <SearchInput\n              placeholder={t('inputs.searchText')}\n              enterButton=\"Search\"\n              size=\"large\"\n              suffix={<AudioOutlined />}\n            />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.password')}>\n          <S.InputsWrapper>\n            <InputPassword\n              placeholder={t('inputs.passwordText')}\n              iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n            />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.textarea')}>\n          <S.InputsWrapper>\n            <TextArea rows={4} />\n          </S.InputsWrapper>\n        </S.Card>\n        <S.Card title={t('inputs.func')}>\n          <S.InputsWrapper>\n            <ClipboardInput\n              value={clipboardValue}\n              placeholder={t('inputs.clipboard')}\n              valueToCopy={clipboardValue}\n              onChange={(e) => setClipboardValue(e.target.value)}\n            />\n            <OpenURLInput\n              value={newTabValue}\n              placeholder={t('inputs.openURL')}\n              href={newTabValue}\n              onChange={(e) => setNewTabValue(e.target.value)}\n            />\n          </S.InputsWrapper>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default InputsPage;\n"],"sourceRoot":""}